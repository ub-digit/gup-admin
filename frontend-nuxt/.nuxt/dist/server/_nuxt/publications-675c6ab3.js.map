{"version":3,"file":"publications-675c6ab3.js","sources":["../../../../node_modules/nuxt/dist/head/runtime/components.js","../../../../store/publication_types.js","../../../../components/Filters.vue","../../../../components/PostRow.vue","../../../../pages/publications.vue"],"sourcesContent":["import { defineComponent } from \"vue\";\nimport { useHead } from \"@unhead/vue\";\nconst removeUndefinedProps = (props) => Object.fromEntries(Object.entries(props).filter(([, value]) => value !== void 0));\nconst setupForUseMeta = (metaFactory, renderChild) => (props, ctx) => {\n  useHead(() => metaFactory({ ...removeUndefinedProps(props), ...ctx.attrs }, ctx));\n  return () => renderChild ? ctx.slots.default?.() : null;\n};\nconst globalProps = {\n  accesskey: String,\n  autocapitalize: String,\n  autofocus: {\n    type: Boolean,\n    default: void 0\n  },\n  class: [String, Object, Array],\n  contenteditable: {\n    type: Boolean,\n    default: void 0\n  },\n  contextmenu: String,\n  dir: String,\n  draggable: {\n    type: Boolean,\n    default: void 0\n  },\n  enterkeyhint: String,\n  exportparts: String,\n  hidden: {\n    type: Boolean,\n    default: void 0\n  },\n  id: String,\n  inputmode: String,\n  is: String,\n  itemid: String,\n  itemprop: String,\n  itemref: String,\n  itemscope: String,\n  itemtype: String,\n  lang: String,\n  nonce: String,\n  part: String,\n  slot: String,\n  spellcheck: {\n    type: Boolean,\n    default: void 0\n  },\n  style: String,\n  tabindex: String,\n  title: String,\n  translate: String\n};\nexport const NoScript = defineComponent({\n  name: \"NoScript\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    title: String,\n    body: Boolean,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((props, { slots }) => {\n    const noscript = { ...props };\n    const textContent = (slots.default?.() || []).filter(({ children }) => children).map(({ children }) => children).join(\"\");\n    if (textContent) {\n      noscript.children = textContent;\n    }\n    return {\n      noscript: [noscript]\n    };\n  })\n});\nexport const Link = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Link\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    as: String,\n    crossorigin: String,\n    disabled: Boolean,\n    fetchpriority: String,\n    href: String,\n    hreflang: String,\n    imagesizes: String,\n    imagesrcset: String,\n    integrity: String,\n    media: String,\n    prefetch: {\n      type: Boolean,\n      default: void 0\n    },\n    referrerpolicy: String,\n    rel: String,\n    sizes: String,\n    title: String,\n    type: String,\n    /** @deprecated **/\n    methods: String,\n    /** @deprecated **/\n    target: String,\n    body: Boolean,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((link) => ({\n    link: [link]\n  }))\n});\nexport const Base = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Base\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    href: String,\n    target: String\n  },\n  setup: setupForUseMeta((base) => ({\n    base\n  }))\n});\nexport const Title = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Title\",\n  inheritAttrs: false,\n  setup: setupForUseMeta((_, { slots }) => {\n    const title = slots.default?.()?.[0]?.children || null;\n    if (process.dev && title && typeof title !== \"string\") {\n      console.error(\"<Title> can only take a string in its default slot.\");\n    }\n    return {\n      title\n    };\n  })\n});\nexport const Meta = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Meta\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    charset: String,\n    content: String,\n    httpEquiv: String,\n    name: String,\n    body: Boolean,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((props) => {\n    const meta = { ...props };\n    if (meta.httpEquiv) {\n      meta[\"http-equiv\"] = meta.httpEquiv;\n      delete meta.httpEquiv;\n    }\n    return {\n      meta: [meta]\n    };\n  })\n});\nexport const Style = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Style\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    type: String,\n    media: String,\n    nonce: String,\n    title: String,\n    /** @deprecated **/\n    scoped: {\n      type: Boolean,\n      default: void 0\n    },\n    body: Boolean,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((props, { slots }) => {\n    const style = { ...props };\n    const textContent = slots.default?.()?.[0]?.children;\n    if (textContent) {\n      if (process.dev && typeof textContent !== \"string\") {\n        console.error(\"<Style> can only take a string in its default slot.\");\n      }\n      style.children = textContent;\n    }\n    return {\n      style: [style]\n    };\n  })\n});\nexport const Head = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Head\",\n  inheritAttrs: false,\n  setup: (_props, ctx) => () => ctx.slots.default?.()\n});\nexport const Html = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Html\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    manifest: String,\n    version: String,\n    xmlns: String,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((htmlAttrs) => ({ htmlAttrs }), true)\n});\nexport const Body = defineComponent({\n  // eslint-disable-next-line vue/no-reserved-component-names\n  name: \"Body\",\n  inheritAttrs: false,\n  props: {\n    ...globalProps,\n    renderPriority: [String, Number]\n  },\n  setup: setupForUseMeta((bodyAttrs) => ({ bodyAttrs }), true)\n});\n","import { defineStore } from 'pinia'\n\nexport const usePublicationTypesStore = defineStore('publicationTypesStore', () => {\n  const publicationTypes = ref([])\n  const pendingPublicationTypes = ref(null);\n\n  async function fetchPublicationTypes(params) {\n    try {\n      pendingPublicationTypes.value = true;\n      const {data, error} = await useFetch(\"/api/pubtypes\", {params\n      });\n      pendingPublicationTypes.value = false;\n      publicationTypes.value = data.value.publication_types;\n    } catch (error) {\n      console.log(\"Something went wrong: fetchPublicationTypes\")\n    }\n\n  }\n\n\n  function $reset() {\n    // manually reset store here\n  }\n  return { publicationTypes,fetchPublicationTypes, pendingPublicationTypes}\n})","<template>\n    <div>\n        <form class=\"col\" @submit.prevent=void(0) id=\"filters\">\n              <div class=\"row\">\n                <div class=\"col\">\n                  <div class=\"form-check col-auto form-switch mb-3\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"needs_attention\" v-model=\"filters.needs_attention\">\n                    <label class=\"form-check-label\" for=\"needs_attention\">{{ t('views.publications.form.needs_attention') }}</label>\n                  </div>\n                </div>\n                <div class=\"col-auto\">\n                  <Spinner v-if=\"pendingImportedPosts\" class=\"me-4\" />\n                </div>\n              </div>\n              <div class=\"mb-3\">\n                <div class=\"form-check form-check-inline\">\n                  <input class=\"form-check-input\" type=\"checkbox\" id=\"scopus\" v-model=\"filters.scopus\">\n                  <label class=\"form-check-label\" for=\"scopus\">{{ t('views.publications.form.scopus_title') }}</label>\n                </div>\n\n                <div class=\"form-check form-check-inline\">\n                  <input class=\"form-check-input\" type=\"checkbox\" id=\"wos\" v-model=\"filters.wos\">\n                  <label class=\"form-check-label\" for=\"wos\">{{ t('views.publications.form.wos_title') }}</label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                  <input class=\"form-check-input\" type=\"checkbox\" id=\"manual\" v-model=\"filters.manual\">\n                  <label class=\"form-check-label\" for=\"manual\">{{ t('views.publications.form.manual_title') }}</label>\n                </div>\n              </div>\n              <select class=\"form-select mb-3\" v-model=\"filters.pubtype\" :aria-label=\"t('views.publications.form.pub_type_select_label')\">\n                <option value=\"\" selected>{{ t('views.publications.form.pub_type_select_label') }}</option>\n                <option v-for=\"pubtype in publicationTypes\" :value=\"pubtype.id\" :key=\"pubtype.id\">\n                  {{ pubtype.display_name }}\n                </option>\n              </select>\n\n              <div class=\"mb-3\">\n                <label for=\"title\" class=\"form-label visually-hidden\">{{ t('views.publications.form.title_label') }}</label>\n                <input type=\"search\" v-model=\"title_str\" class=\"form-control\" id=\"title\" :placeholder=\"t('views.publications.form.title_label')\">\n              </div>\n            </form>\n    </div>\n</template>\n\n<script setup>\nimport { useFilterStore} from '~/store/filter'\nimport { onMounted, onUnmounted } from 'vue'\nimport { usePublicationTypesStore } from '~/store/publication_types'\nimport { storeToRefs } from 'pinia'\nimport { useDebounceFn } from '@vueuse/core'\nconst props = defineProps(['pendingImportedPosts'])\nconst {t, getLocale} = useI18n();\n\nconst publicationTypesStore = usePublicationTypesStore()\nconst { fetchPublicationTypes } = publicationTypesStore\nconst { publicationTypes, pendingPublicationTypes } = storeToRefs(publicationTypesStore)\nawait fetchPublicationTypes({lang: getLocale()});\n\nconst filterStore = useFilterStore();\nconst {$reset} = filterStore;\nconst {filters} = storeToRefs(filterStore);\n\nconst title_str = ref(filters.value.title);\n\n// throttle input\nconst debouncedFn = useDebounceFn(() => {\n  filters.value.title = title_str.value;\n}, 500)\n\n\nonUnmounted(() => {\n  $reset();\n})\n\nwatch(\n  title_str, \n  () => {\n    debouncedFn();\n  }\n)\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>","<template>\n    <div>\n        <NuxtLink :to=\"{name:'publications-post-id', query: $route.query, params: {id: post.id}}\" class=\"list-group-item list-group-item-action\">\n            <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"title mb-1\">{{ post.title }}</h5>\n                <small v-if=\"post.gup_id\" class=\"text-muted\">GUP-ID: {{ post.gup_id }}</small>\n            </div>\n            <p class=\"mb-0\">{{post.date}}</p>\n            <small>Pubtype: {{post.pubtype}}<br>\n            {{ post.number_of_authors }} författare</small>\n        </NuxtLink>\n    </div>\n</template>\n\n<script setup>\nconst props = defineProps(['post'])\nconst {t} = useI18n();\n\n\n</script>\n\n<style lang=\"scss\" scoped>\n.list-group-item  {\n    &.router-link-active {\n      background: rgb(223, 222, 222);\n    }\n}\n\n</style>","<template>\n<div>\n  <Head>\n    <title>{{t('seo.application_title')}}</title>\n    <Meta name=\"description\" :content=\"t('seo.application_title')\" />\n  </Head>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-4\">\n          <div class=\"row\">\n            <Filters :pendingImportedPosts=\"pendingImportedPosts\" />\n          </div>\n          <div id=\"result-list-by-id\" class=\"row\">\n            <div class=\"col scroll\" :class=\"{'opacity-50': pendingImportedPosts}\">\n              <div v-if=\"!importedPosts.length\">{{ t('views.publications.result_list.no_imported_posts_found') }}</div>\n              <div v-else class=\"list-group list-group-flush border-bottom\">\n                  <PostRow v-for=\"post in importedPosts\" :post=\"post\" :key=\"post.id\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <NuxtPage/>\n          </div>\n      </div>\n    </div>\n  </div>\n</div>\n</template>\n\n<script setup>\nimport { useImportedPostsStore } from '~/store/imported_posts'\nimport { storeToRefs } from 'pinia'\nimport _ from \"lodash\";\nconst {t, getLocale} = useI18n();\nconst config = useRuntimeConfig();\nconst route = useRoute();\nconst router = useRouter();\n\nconst importedPostsStore = useImportedPostsStore()\nconst { fetchImportedPosts } = importedPostsStore\nconst { importedPosts, pendingImportedPosts } = storeToRefs(importedPostsStore)\nawait fetchImportedPosts();\n\n</script>\n\n<style lang=\"scss\">\n.scroll {\n  max-height: 800px;\n  overflow-y: scroll;\n}\n\n</style>  "],"names":["_withAsyncContext"],"mappings":"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","x_google_ignoreList":[0]}
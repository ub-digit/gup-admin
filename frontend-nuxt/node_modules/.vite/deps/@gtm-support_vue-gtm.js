import "./chunk-52GZFXHM.js";
import {
  nextTick
} from "./chunk-E7A5LK3S.js";
import {
  __publicField
} from "./chunk-THBTSZW5.js";

// node_modules/@gtm-support/core/lib/index.js
var GTM_ID_PATTERN = /^GTM-[0-9A-Z]+$/;
function assertIsGtmId(id) {
  if (typeof id !== "string" || !GTM_ID_PATTERN.test(id)) {
    const suggestion = String(id).toUpperCase().replace(/.*-|[^0-9A-Z]/g, "");
    const suggestionText = suggestion.length === 0 ? "" : ` Did you mean 'GTM-${suggestion}'?`;
    throw new Error(
      `'${id}' is not a valid GTM-ID (${GTM_ID_PATTERN}).${suggestionText}`
    );
  }
}
function loadScript(id, config) {
  var _a;
  const doc = document;
  const script = doc.createElement("script");
  const scriptLoadListener = (event) => {
    var _a2;
    (_a2 = config.onReady) == null ? void 0 : _a2.call(config, { id, script });
    script.removeEventListener("load", scriptLoadListener);
  };
  script.addEventListener("load", scriptLoadListener);
  window.dataLayer = window.dataLayer ?? [];
  (_a = window.dataLayer) == null ? void 0 : _a.push({
    event: "gtm.js",
    "gtm.start": new Date().getTime()
  });
  if (!id) {
    return script;
  }
  script.async = !config.defer;
  script.defer = Boolean(config.defer || config.compatibility);
  if (config.nonce) {
    script.nonce = config.nonce;
  }
  const queryString = new URLSearchParams({
    id,
    ...config.queryParams ?? {}
  });
  const source = config.source ?? "https://www.googletagmanager.com/gtm.js";
  script.src = `${source}?${queryString}`;
  const parentElement = config.parentElement ?? doc.body;
  if (typeof (parentElement == null ? void 0 : parentElement.appendChild) !== "function") {
    throw new Error("parentElement must be a DOM element");
  }
  parentElement.appendChild(script);
  return script;
}
function hasScript(source = "https://www.googletagmanager.com/gtm.js") {
  return Array.from(document.getElementsByTagName("script")).some(
    (script) => script.src.includes(source)
  );
}
var GtmSupport = class {
  constructor(options) {
    __publicField(this, "id");
    __publicField(this, "options");
    __publicField(this, "scriptElements", []);
    __publicField(this, "isInBrowserContext", () => typeof window !== "undefined");
    if (Array.isArray(options.id)) {
      for (const idOrObject of options.id) {
        if (typeof idOrObject === "string") {
          assertIsGtmId(idOrObject);
        } else {
          assertIsGtmId(idOrObject.id);
        }
      }
    } else {
      assertIsGtmId(options.id);
    }
    this.id = options.id;
    this.options = {
      enabled: true,
      debug: false,
      loadScript: true,
      defer: false,
      compatibility: false,
      ...options
    };
    delete this.options.id;
  }
  enabled() {
    return this.options.enabled ?? true;
  }
  enable(enabled = true, source) {
    this.options.enabled = enabled;
    if (this.isInBrowserContext() && enabled && !hasScript(source) && this.options.loadScript) {
      if (Array.isArray(this.id)) {
        this.id.forEach((id) => {
          let scriptElement;
          if (typeof id === "string") {
            scriptElement = loadScript(id, {
              ...this.options
            });
          } else {
            scriptElement = loadScript(id.id, {
              ...this.options,
              queryParams: id.queryParams
            });
          }
          this.scriptElements.push(scriptElement);
        });
      } else {
        const scriptElement = loadScript(this.id, {
          ...this.options
        });
        this.scriptElements.push(scriptElement);
      }
    }
  }
  debugEnabled() {
    return this.options.debug ?? false;
  }
  debug(enable) {
    this.options.debug = enable;
  }
  dataLayer() {
    if (this.isInBrowserContext() && this.options.enabled) {
      return window.dataLayer = window.dataLayer ?? [];
    }
    return false;
  }
  trackView(screenName, path, additionalEventData = {}) {
    const trigger = this.isInBrowserContext() && (this.options.enabled ?? false);
    if (this.options.debug) {
      console.log(
        `[GTM-Support${trigger ? "" : "(disabled)"}]: Dispatching TrackView`,
        { screenName, path }
      );
    }
    if (trigger) {
      const dataLayer = window.dataLayer = window.dataLayer ?? [];
      dataLayer.push({
        ...additionalEventData,
        event: this.options.trackViewEventProperty ?? "content-view",
        "content-name": path,
        "content-view-name": screenName
      });
    }
  }
  trackEvent({
    event,
    category = null,
    action = null,
    label = null,
    value = null,
    noninteraction = false,
    ...rest
  } = {}) {
    const trigger = this.isInBrowserContext() && (this.options.enabled ?? false);
    if (this.options.debug) {
      console.log(
        `[GTM-Support${trigger ? "" : "(disabled)"}]: Dispatching event`,
        {
          event,
          category,
          action,
          label,
          value,
          ...rest
        }
      );
    }
    if (trigger) {
      const dataLayer = window.dataLayer = window.dataLayer ?? [];
      dataLayer.push({
        event: event ?? "interaction",
        target: category,
        action,
        "target-properties": label,
        value,
        "interaction-type": noninteraction,
        ...rest
      });
    }
  }
};

// node_modules/@gtm-support/vue-gtm/dist/index.js
var gtmPlugin;
function install(app, options = { id: "" }) {
  options = { trackOnNextTick: false, ...options };
  gtmPlugin = new GtmSupport(options);
  app.config.globalProperties.$gtm = gtmPlugin;
  if (gtmPlugin.isInBrowserContext()) {
    if (options.vueRouter) {
      initVueRouterGuard(
        app,
        options.vueRouter,
        options.ignoredViews,
        options.trackOnNextTick,
        options.vueRouterAdditionalEventData
      );
    }
    if (gtmPlugin.options.enabled && gtmPlugin.options.loadScript) {
      if (Array.isArray(options.id)) {
        options.id.forEach((id) => {
          if (typeof id === "string") {
            loadScript(id, options);
          } else {
            const newConf = {
              ...options
            };
            if (id.queryParams != null) {
              newConf.queryParams = {
                ...newConf.queryParams,
                ...id.queryParams
              };
            }
            loadScript(id.id, newConf);
          }
        });
      } else {
        loadScript(options.id, options);
      }
    }
  }
  app.provide("gtm", options);
}
function initVueRouterGuard(app, vueRouter, ignoredViews = [], trackOnNextTick, deriveAdditionalEventData = () => ({})) {
  function isNavigationFailure(failure, navigationFailureType) {
    if (!(failure instanceof Error)) {
      return false;
    }
    return !!(failure.type & navigationFailureType);
  }
  vueRouter.afterEach(async (to, from, failure) => {
    var _a, _b, _c;
    if (typeof to.name !== "string" || Array.isArray(ignoredViews) && ignoredViews.includes(to.name) || typeof ignoredViews === "function" && ignoredViews(to, from)) {
      return;
    }
    const name = to.meta && typeof to.meta.gtm === "string" && !!to.meta.gtm ? to.meta.gtm : to.name;
    if (isNavigationFailure(failure, 4)) {
      if (gtmPlugin == null ? void 0 : gtmPlugin.debugEnabled()) {
        console.log(
          `[VueGtm]: '${name}' not tracked due to navigation aborted`
        );
      }
    } else if (isNavigationFailure(failure, 8)) {
      if (gtmPlugin == null ? void 0 : gtmPlugin.debugEnabled()) {
        console.log(
          `[VueGtm]: '${name}' not tracked due to navigation cancelled`
        );
      }
    }
    const additionalEventData = {
      ...await deriveAdditionalEventData(to, from),
      ...(_a = to.meta) == null ? void 0 : _a.gtmAdditionalEventData
    };
    const baseUrl = ((_c = (_b = vueRouter.options) == null ? void 0 : _b.history) == null ? void 0 : _c.base) ?? "";
    let fullUrl = baseUrl;
    if (!fullUrl.endsWith("/")) {
      fullUrl += "/";
    }
    fullUrl += to.fullPath.startsWith("/") ? to.fullPath.substring(1) : to.fullPath;
    if (trackOnNextTick) {
      void nextTick(() => {
        gtmPlugin == null ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);
      });
    } else {
      gtmPlugin == null ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);
    }
  });
}
function createGtm(options) {
  return { install: (app) => install(app, options) };
}
var _default = { install };
function useGtm() {
  return gtmPlugin;
}
export {
  GtmSupport as GtmPlugin,
  GtmSupport,
  assertIsGtmId,
  createGtm,
  _default as default,
  hasScript,
  loadScript,
  useGtm
};
//# sourceMappingURL=@gtm-support_vue-gtm.js.map
